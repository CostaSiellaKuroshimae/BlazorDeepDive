@page "/servers"
@page "/servers/back_from/{city_name}"


@rendermode InteractiveServer

@inject NavigationManager _navigationManager

<h3>Servers</h3>
<br/>
<br/>

<CityListComponent @ref="cityListComponent" SelectCityCallback="HandleCitySelection"></CityListComponent>


<br />


<br />

<SearchServersComponent @ref="searchServersComponent" SearchServerCallBack="HandleSearchServer"></SearchServersComponent>

<CascadingValue Name="SelectedCity" Value="@selectedCity">
	<ServerListComponent CityName="@this.selectedCity" SearchFilter="@searchFilter" @rendermode="InteractiveServer"></ServerListComponent>

</CascadingValue>




<p>
	<a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>




@code {
	// [Parameter]
	public string? CityName { get; set; }
	private string selectedCity = "Toronto";

	private string searchFilter = "";

	private CityListComponent? cityListComponent;
	private SearchServersComponent? searchServersComponent;

	private void HandleCitySelection(string cityName)
	{
		// this.servers = ServersRepository.GetServersByCity(cityName);
		selectedCity = cityName;
		this.searchFilter = "";
		searchServersComponent?.ClearFilter();
	}

	private void HandleSearchServer(string searchFilter)
	{
		// selectedCity = searchFilter ?? "Toronto";
		this.searchFilter = searchFilter;

		cityListComponent?.ClearSelection();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			if(_navigationManager.Uri.Contains("back_from") && !string.IsNullOrWhiteSpace(CityName))
			{
				selectedCity = CityName;
				StateHasChanged();
			}
		}
		base.OnAfterRender(firstRender);
	}
}
