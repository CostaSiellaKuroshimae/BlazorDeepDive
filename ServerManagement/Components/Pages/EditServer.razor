@page "/servers/edit/{id:int}"

@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
@inject IServersEFCoreRepository ServersEFCoreRepository


<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationMethod"
	ConfirmExternalNavigation="true"></NavigationLock>

<h3>Edit Server</h3>
<br />
<br />

@if (server != null)
{
	<EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>
		<InputNumber @bind-Value="server.ServerId" hidden></InputNumber>

		<FieldComponent Label="Name">
			<Control>
				<InputText @bind-Value="server.Name" class="form-control"></InputText>
			</Control>
			<ValidationControl>
				<ValidationMessage For="() => server.Name"></ValidationMessage>

			</ValidationControl>
		</FieldComponent>


		<FieldComponent Label="City">
			<Control>
				<InputText @bind-Value="server.City" class="form-control"></InputText>
			</Control>
			<ValidationControl>
				<ValidationMessage For="() => server.City"></ValidationMessage>

			</ValidationControl>
		</FieldComponent>

		<FieldComponent Label="Online">
			<Control>
				<InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
			</Control>
		</FieldComponent>

		<br />

		<button class="btn btn-primary" type="submit">Update</button>
		&nbsp;
		<a href="/servers" class="btn btn-primary">Close</a>
		<ValidationSummary></ValidationSummary>




	</EditForm>
}

<br />


@code {

	[Parameter]
	public int Id { get; set; }

	[SupplyParameterFromForm(FormName = "formServer")]
	private Server? server { get; set; }

	protected override void OnParametersSet()
	{
		server ??= ServersEFCoreRepository.GetServerById(this.Id);

	}

	private async Task OnBeforeInternalNavigationMethod(LocationChangingContext context)
	{
		var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to leave this page?");

		if (!isConfirmed)
		{
			context.PreventNavigation();
		}
	}

	private async Task Submit()
	{
		if (server != null)
		{
			ServersEFCoreRepository.UpdateServer(server.ServerId, server);
		}

		_navigationManager.NavigateTo($"/servers/back_from/{this.server?.City}");
	}
}
