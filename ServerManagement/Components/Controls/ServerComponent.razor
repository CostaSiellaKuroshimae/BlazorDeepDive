@using StateStore
@inject NavigationManager _navigationManager
@inject TorontoOnlineServersStore _torontoOnlineServersStore
@inject IServersEFCoreRepository ServersEFCoreRepository

@if(Server != null)
{


	<tr @key="Server.ServerId" style="background-color: @GetBackgroundColor()">
		<td>
			@Server.Name
		</td>

		<td>
			@Server.City
		</td>
		<td style="color: @(Server.IsOnline? "green" : "red")">@(Server.IsOnline ? "online" : "offline")</td>




		<td>
			@if (Server.IsOnline)
			{
				Random random = new();
				int randomNumber = random.Next(0, 500);
				<text>@randomNumber</text>
			}
			else
			{
				<text>N/A</text>
			}
		</td>

		<td>
			@if (Server.IsOnline)
			{
				<button class="btn btn-outline-danger" type="button" @onclick="@(() =>SetServerStatus(false))">
					Turn Off
				</button>
			}
			else
			{
				<button class="btn btn-outline-success" type="button" @onclick="@(() =>SetServerStatus(true))">
					Turn On
				</button>
			}
			&nbsp;
			<a href="/server/@Server.ServerId" class="btn btn-outline-primary">Edit</a>
		</td>

		<td>
			<EditForm Model="Server"
					  FormName="@($"form-server-{Server.ServerId}")"
					  OnValidSubmit="@(() => { DeleteServer(Server.ServerId);})">

				<button type="submit" class="btn btn-danger">Delete</button>
			</EditForm>
		</td>

	</tr>
}



@code {
	[Parameter]
	public Server? Server { get; set; }

	[CascadingParameter(Name ="SelectedCity")]
	public string? SelectedCity { get; set; }

	private bool editingServer = false;
	//Implicit Razor Syntax starts with @
	//Explicit Razor starts with @ and has ()




	private void DeleteServer(int serverId)
	{
		if (serverId > 0)
		{
			ServersEFCoreRepository.DeleteServer(serverId);
			_navigationManager.NavigateTo("/servers", true);
		}
	}

	private string GetBackgroundColor()
	{
		if(SelectedCity != null)
		{
			switch (this.SelectedCity)
			{
				case "Toronto" : return "powerblue";
				case "Montreal" : return "lightgray";
				case "Ottawa" : return "palegreen";
				case "Calgary" : return "pink";
				case "Halifax" : return "white";
				case "Chicago" : return "lightblue";
				case "Indianapolis" : return "blue";
				default:
					return "white";
			}
		}
		else
		{
			return "white";
		}
	}

	private void SetServerStatus(bool status)
	{
		if(this.Server is not null)
		{
			if(this.Server.IsOnline != status)
			{
				if(this.Server.City.Equals("Toronto", StringComparison.OrdinalIgnoreCase))
				{
					var num = _torontoOnlineServersStore.GetNumberServersOnline();
					if (status)
					{
						_torontoOnlineServersStore.SetNumberServersOnline(num + 1);
					}else if(num > 1)
					{
						_torontoOnlineServersStore.SetNumberServersOnline(num - 1);
					}
				}
				this.Server.IsOnline = status;

			}

		}
	}
}
